services:
  fastapi_app:
    build:
      context: .
      dockerfile: docker/FastAPI.Dockerfile
    container_name: fastapi_app
    restart: always
    ports:
      - "8000:8000"
    networks:
      - app_network
    depends_on:
      - celery_worker
    environment:
      POSTGRES_CONFIG: '{"database":"tasks","user":"dbuser","password":"dbpassword","host":"postgres_db","port":"5432","min_size":"2","max_size":"10"}'
      CELERY_BROKER_URL: "pyamqp://guest@rabbitmq_broker:5672//"
      CELERY_RESULT_BACKEND: "mongodb://admin:secret@mongodb_backend:27017/celery_results"
      STORAGE_DIR: "/app/uploads"
    volumes:
      - uploads:/app/uploads
    profiles:
      - app

  celery_worker:
    build:
      context: .
      dockerfile: docker/Celery.Dockerfile
    container_name: celery_worker
    restart: always
    networks:
      - app_network
    environment:
      POSTGRES_CONFIG: '{"database":"tasks","user":"dbuser","password":"dbpassword","host":"postgres_db","port":"5432","min_size":"2","max_size":"10"}'
      CELERY_BROKER_URL: "pyamqp://guest@rabbitmq_broker:5672//"
      CELERY_RESULT_BACKEND: "mongodb://admin:secret@mongodb_backend:27017/celery_results"
    volumes:
      - uploads:/app/uploads
    profiles:
      - app

  flower_app:
    build:
      context: .
      dockerfile: docker/Flower.Dockerfile
    container_name: flower_app
    restart: always
    depends_on:
      - rabbitmq_broker
    ports:
      - "5555:5555"
    networks:
      - app_network
    profiles:
      - backend

  rabbitmq_broker:
    build:
      context: .
      dockerfile: docker/RabbitMQ.Dockerfile
    container_name: rabbitmq_broker
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app_network
    volumes:
      - rabbitmq_data:/data
    profiles:
      - backend

  redis_broker:
    build:
      context: .
      dockerfile: docker/Redis.Dockerfile
    container_name: redis_broker
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app_network
    volumes:
      - redis_data:/data
    profiles:
      - ignore-me

  mongodb_backend:
    build:
      context: .
      dockerfile: docker/Mongodb.Dockerfile
    container_name: mongodb_backend
    restart: always
    ports:
      - "27017:27017"
    networks:
      - app_network
    volumes:
      - mongo_data:/data/db
    profiles:
      - backend

  postgres_db:
    build:
      context: .
      dockerfile: docker/Postgresdb.Dockerfile
    container_name: postgres_db
    restart: always
    ports:
      - "5432:5432"
    networks:
      - app_network
    volumes:
      - postgres_data:/data/db
    profiles:
      - backend

networks:
  app_network:
    driver: bridge

volumes:
  mongo_data:
  redis_data:
  rabbitmq_data:
  postgres_data:
  uploads:
